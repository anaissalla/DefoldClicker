

function init(self)
	msg.post(".","acquire_input_focus")
	
	gui.set_render_order(15)

 	self.item1Price = gui.get_node("item1Price")
 	self.item1Pie = gui.get_node("item1Pie")
 	self.item1Count = gui.get_node("item1Amount")

 	self.item2Price = gui.get_node("item2Price")
 	self.item2Pie = gui.get_node("item2Pie")
 	self.item2Count = gui.get_node("item2Amount")

 	self.item3Price = gui.get_node("item3Price")
 	self.item3Pie = gui.get_node("item3Pie")
 	self.item3Count = gui.get_node("item3Amount")

 	self.item4Price = gui.get_node("item4Price")
 	self.item4Pie = gui.get_node("item4Pie")
	self.item4Count = gui.get_node("item4Amount")

	self.upgradeButton = gui.get_node("upgradeButton")
	self.item1Button = gui.get_node("item1Button")
	self.item2Button = gui.get_node("item2Button")
	self.item3Button = gui.get_node("item3Button")
	self.item4Button = gui.get_node("item4Button")
	self.item1OC = gui.get_node("OCButton1")
	self.item2OC = gui.get_node("OCButton2")
	self.item3OC = gui.get_node("OCButton3")
	self.item4OC = gui.get_node("OCButton4")


	self.isOverItem1OC = false
	self.isOverItem2OC = false
	self.isOverItem3OC = false
	self.isOverItem4OC = false

	self.isOverItem1Buy = false
	self.isOverItem2Buy = false
	self.isOverItem3Buy = false
	self.isOverItem4Buy = false

	self.isOverUpgrade = false
	self.PClevel = 0

	self.hoverMarket = gui.get_node("HoverMarket")
	self.hoverOC = gui.get_node("HoverOC")
	self.hoverUpgrade = gui.get_node("HoverUpgrade")


	gui.set_enabled(self.hoverOC, false)
	gui.set_enabled(self.hoverMarket, false)
	gui.set_enabled(self.hoverUpgrade, false)

	self.item1Production = 0
	self.item2Production = 0
	self.item3Production = 0
	self.item4Production = 0

	self.color = {red = vmath.vector4(0.9,0,0,1), green = vmath.vector4(0,0.9,0,1)}

	self.currentJar = 0
	self.jarFrames = 16
	self.upgradeAvailable = false
	self.jarAvailablePlaying = false
end

function short_numbers(number) 
	local shorted_number
	if number < 10^3  then
		shorted_number = (string.format("%.f", number) .. " $")
	elseif number < 10^6 then 
		shorted_number = (string.format("%.f", number) .. " $")
	elseif number < 10^9 then
		number = number / 10^6
		shorted_number = (string.format("%3.3f", number) .. "M $")
	elseif number < 10^12 then
		number = number / 10^9
		shorted_number = (string.format("%3.3f", number) .. "B $")
	end
	return shorted_number
end

function is_over(node, pos)
	if gui.pick_node(node, pos.x, pos.y) then 
      	return true
    else
      	return false
 	end
end

function calculateJarFrame(self, progress, framePortion)
	if(progress > framePortion) then
		self.currentJar = framePortion + (1/self.jarFrames)
		calculateJarFrame(self, progress, self.currentJar)
	elseif (progress <= framePortion) then
		local jar = gui.get_node("upgradeButton")
		local  play_properties = {
			offset = framePortion - 1/self.jarFrames,
			playback_rate = 0
		}
		gui.play_flipbook(jar, "Jar", nil, play_properties)
	end
end

function disableJar(self)
	local jar = gui.get_node("upgradeButton")
	gui.set_enabled(jar, false)
end

function update( self, dt )
	--Update Upgrade Availability
	if(bitcoinCount >= self.upgrade1Cost) then
		gui.play_flipbook(self.item1OC, "Overclock3")
	else
		gui.play_flipbook(self.item1OC, "Overclock_unavailable3")
	end
	if(bitcoinCount >= self.upgrade2Cost) then
		gui.play_flipbook(self.item2OC, "Overclock1")
	else
		gui.play_flipbook(self.item2OC, "Overclock_unavailable1")
	end
	if(bitcoinCount >= self.upgrade3Cost) then
		gui.play_flipbook(self.item3OC, "Overclock2")
	else
		gui.play_flipbook(self.item3OC, "Overclock_unavailable2")
	end
	if(bitcoinCount >= self.upgrade4Cost) then
		gui.play_flipbook(self.item4OC, "Overclock4")
	else
		gui.play_flipbook(self.item4OC, "Overclock_unavailable4")
	end
end

function on_message(self, message_id, message, sender)
	--update upgrade info
	if message_id == hash("UpdateUpgrade") then
		self.upgrade1Cost = message.item1
		self.upgrade2Cost = message.item2
		self.upgrade3Cost = message.item3
		self.upgrade4Cost = message.item4
		

	end
	--Upgate hover market info
	if message_id == hash("UpdateInfo") then
		
		self.item1Production = message.item1Production
		self.item2Production = message.item2Production
		self.item3Production = message.item3Production
		self.item4Production = message.item4Production
	end
	--update amount and price
	if message_id == hash("Updateitem1") then
		gui.set_text(self.item1Count, message.count)
		gui.set_text(self.item1Price, short_numbers(message.price))
	end	
	if message_id == hash("Updateitem2") then
		gui.set_text(self.item2Count, message.count)
		gui.set_text(self.item2Price, short_numbers(message.price))
	end
	if message_id == hash("Updateitem3") then
		gui.set_text(self.item3Count, message.count)
		gui.set_text(self.item3Price, short_numbers(message.price))
	end
	if message_id == hash("Updateitem4") then
		
		gui.set_text(self.item4Count, message.count)
		gui.set_text(self.item4Price, short_numbers(message.price))
	end

	if message_id == hash("UpdatePCUpgrade") then

		self.upgradePCCost = message.click
		--set flipbook jar
		if message.progress >= 1 then
			self.upgradeAvailable = true
			if(self.jarAvailablePlaying == false) then
				local jar = gui.get_node("upgradeButton")
				gui.play_flipbook(jar, "JarAvailable")
				self.jarAvailablePlaying = true
			end
		else
			self.upgradeAvailable = false
			self.jarAvailablePlaying = false
		end
		
		if self.upgradeAvailable == false then
			calculateJarFrame(self, message.progress, 0)
		end
	end
	--update Availability
	if message_id == hash("UpdateAvailability") then

		if message.item1 >= 1 then
			gui.set_color(self.item1Price, self.color.green)--green
			gui.set_fill_angle(self.item1Pie, 0)
		else
			gui.set_color(self.item1Price, self.color.red)--red
			gui.set_fill_angle(self.item1Pie, 360 - message.item1 * 360)
		end
		if message.item2 >= 1 then
			gui.set_color(self.item2Price, self.color.green)--green
			gui.set_fill_angle(self.item2Pie, 0)
		else
			gui.set_color(self.item2Price, self.color.red)--red
			gui.set_fill_angle(self.item2Pie, 360 - message.item2 * 360)
		end
		if message.item3 >= 1 then
			gui.set_color(self.item3Price, self.color.green)--green
			gui.set_fill_angle(self.item3Pie, 0)
		else
			gui.set_color(self.item3Price, self.color.red)--red
			gui.set_fill_angle(self.item3Pie, 360 - message.item3 * 360)
		end
		if message.item4 >= 1 then
			gui.set_color(self.item4Price, self.color.green)--green
			gui.set_fill_angle(self.item4Pie, 0)
		else
			gui.set_color(self.item4Price,self.color.red)--red
			gui.set_fill_angle(self.item4Pie, 360 - message.item4 * 360)
		end
	end

	if message_id == hash("MaxLevelReached") then
		local jar = gui.get_node("upgradeButton")
		gui.play_flipbook(jar, "JarBreaking")
		--timer.delay(4, false, disableJar)
	end
end

function hoverButtonText(self, pos)
	if self.isOverItem1Buy then
		if not gui.is_enabled(self.hoverMarket) then
			gui.set_enabled(self.hoverMarket, true)
			gui.set_text(gui.get_node("HMTitle"), "Envy X650")
			local text1 = "Each Envy X650 produces " .. short_numbers(self.item1Production) .. "/s"
			local text2 = "You have " .. gui.get_text(self.item1Count) .. " Envy X650 for a total of " .. short_numbers(self.item1Production * gui.get_text(self.item1Count)) .. "/s"
			local text = text1 .. "\n" .. text2
			gui.set_text(gui.get_node("HMInfo"), text )
		end
		gui.set_position(self.hoverMarket, vmath.vector3(pos.x, pos.y, 0))
	elseif self.isOverItem2Buy then
		if not gui.is_enabled(self.hoverMarket) then
			gui.set_enabled(self.hoverMarket, true)
			gui.set_text(gui.get_node("HMTitle"), "3DFX Vodoo7")
			local text1 = "Each Vodoo7 produces " .. short_numbers(self.item2Production) .. "/s"
			local text2 = "You have " .. gui.get_text(self.item2Count) .. " Vodoo7 for a total of " .. short_numbers(self.item2Production * gui.get_text(self.item2Count)) .. "/s"
			local text = text1 .. "\n" .. text2
			gui.set_text(gui.get_node("HMInfo"), text )
		end
		gui.set_position(self.hoverMarket, vmath.vector3(pos.x, pos.y, 0))

	elseif self.isOverItem3Buy then
		if not gui.is_enabled(self.hoverMarket) then
			gui.set_enabled(self.hoverMarket, true)
			gui.set_text(gui.get_node("HMTitle"), "AMF 280XT")
			local text1 = "Each AMF 280XT produces " .. short_numbers(self.item3Production) .. "/s"
			local text2 = "You have " .. gui.get_text(self.item3Count) .. " AMF 280XT for a total of " .. short_numbers(self.item3Production * gui.get_text(self.item3Count)) .. "/s"
			local text = text1 .. "\n" .. text2
			gui.set_text(gui.get_node("HMInfo"), text )
		end
		gui.set_position(self.hoverMarket, vmath.vector3(pos.x, pos.y, 0))
	elseif self.isOverItem4Buy then
		if not gui.is_enabled(self.hoverMarket) then
			gui.set_enabled(self.hoverMarket, true)
			gui.set_text(gui.get_node("HMTitle"), "Item4")
			local text1 = "Each Item4 produces " .. short_numbers(self.item4Production) .. "/s"
			local text2 = "You have " .. gui.get_text(self.item4Count) .. " Item4 for a total of " .. short_numbers(self.item4Production * gui.get_text(self.item4Count)) .. "/s"
			local text = text1 .. "\n" .. text2
			gui.set_text(gui.get_node("HMInfo"), text )
		end
		gui.set_position(self.hoverMarket, vmath.vector3(pos.x, pos.y, 0))
	else
		gui.set_enabled(self.hoverMarket, false)
	end

	if self.isOverItem1OC then
		if not gui.is_enabled(self.hoverOC) then
			gui.set_enabled(self.hoverOC, true)
			gui.set_text(gui.get_node("HOCTitle"), "Overclock")
			local textNode = gui.get_node("HOCInfo")
			print(self.upgrade1Cost .. " " .. bitcoinCount)
			if bitcoinCount >= self.upgrade1Cost then
				gui.set_color(textNode, self.color.green)
			else
				gui.set_color(textNode, self.color.red)
			end
			gui.set_text(textNode, short_numbers(self.upgrade1Cost))
		end 
		gui.set_position(self.hoverOC, vmath.vector3(pos.x, pos.y, 0))

	elseif self.isOverItem2OC then
		if not gui.is_enabled(self.hoverOC) then
			gui.set_enabled(self.hoverOC, true)
			gui.set_text(gui.get_node("HOCTitle"), "Overclock")
			local textNode = gui.get_node("HOCInfo")
			
			if bitcoinCount >= self.upgrade2Cost then
				gui.set_color(textNode, self.color.green)
			else
				gui.set_color(textNode, self.color.red)
			end
			gui.set_text(textNode, short_numbers(self.upgrade2Cost))
		end 
		gui.set_position(self.hoverOC, vmath.vector3(pos.x, pos.y, 0))

	elseif self.isOverItem3OC then
		if not gui.is_enabled(self.hoverOC) then
			gui.set_enabled(self.hoverOC, true)
			gui.set_text(gui.get_node("HOCTitle"), "Overclock")
			local textNode = gui.get_node("HOCInfo")

			if bitcoinCount >= self.upgrade3Cost then
				gui.set_color(textNode, self.color.green)
			else
				gui.set_color(textNode, self.color.red)
			end
			gui.set_text(textNode, short_numbers(self.upgrade3Cost))
		end 
		gui.set_position(self.hoverOC, vmath.vector3(pos.x, pos.y, 0))

	elseif self.isOverItem4OC then
		if not gui.is_enabled(self.hoverOC) then
			gui.set_enabled(self.hoverOC, true)
			gui.set_text(gui.get_node("HOCTitle"), "Overclock")
			local textNode = gui.get_node("HOCInfo")

			if bitcoinCount >= self.upgrade4Cost then
				gui.set_color(textNode, self.color.green)
			else
				gui.set_color(textNode, self.color.red)
			end
			gui.set_text(textNode, short_numbers(self.upgrade4Cost))
		end 
		gui.set_position(self.hoverOC, vmath.vector3(pos.x, pos.y, 0))
		
	else
		gui.set_enabled(self.hoverOC, false)
	end

	if self.isOverUpgrade and self.PClevel < 4 then
		if not gui.is_enabled(self.hoverUpgrade) then
			gui.set_enabled(self.hoverUpgrade, true)
			gui.set_text(gui.get_node("HOCTitle1"), "Upgrade PC")
			local textNode = gui.get_node("HOCInfo1")

			if bitcoinCount >= self.upgradePCCost then
				gui.set_color(textNode, self.color.green)
			else
				gui.set_color(textNode, self.color.red)
			end
			gui.set_text(textNode, short_numbers(self.upgradePCCost))
		end 
		gui.set_position(self.hoverUpgrade, vmath.vector3(pos.x, pos.y, 0))
	else
		gui.set_enabled(self.hoverUpgrade, false)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("LEFT_CLICK") and action.released then
		
		--item1 button
		if gui.pick_node(self.item1Button, action.x, action.y) then
			msg.post("/Main#main", "addItem1")
			msg.post("/soundManager#soundManager", "playBuy")
		end

		--item2 button
		if gui.pick_node(self.item2Button, action.x, action.y) then
			msg.post("/Main#main", "addItem2")
			msg.post("/soundManager#soundManager", "playBuy")
		end

		--item3 button
		if gui.pick_node(self.item3Button, action.x, action.y) then
			msg.post("/Main#main", "addItem3")
			msg.post("/soundManager#soundManager", "playBuy")
		end

		--item4 button
		if gui.pick_node(self.item4Button, action.x, action.y) then
			msg.post("/Main#main", "addItem4")	
			msg.post("/soundManager#soundManager", "playBuy")
		end
		
		--Upgrade PC
		if gui.pick_node(self.upgradeButton, action.x, action.y) then
			msg.post("/Main#main", "upgradeClick")
			msg.post("/soundManager#soundManager", "playBuy")
		end

		--OC item1
		if gui.pick_node(self.item1OC, action.x, action.y) then
			msg.post("/Main#main", "OCitem1")
			msg.post("/soundManager#soundManager", "playBuy")
		end

		--OC item2
		if gui.pick_node(self.item2OC, action.x, action.y) then
			msg.post("/Main#main", "OCitem2")
			msg.post("/soundManager#soundManager", "playBuy")
		end

		--OC item3
		if gui.pick_node(self.item3OC, action.x, action.y) then
			msg.post("/Main#main", "OCitem3")
			msg.post("/soundManager#soundManager", "playBuy")
		end

		--OC item4
		if gui.pick_node(self.item4OC, action.x, action.y) then
			msg.post("/Main#main", "OCitem4")
			msg.post("/soundManager#soundManager", "playBuy")
		end
	end	
	if action_id == nil then 
		self.isOverItem1Buy = is_over(self.item1Button, action)
		self.isOverItem2Buy = is_over(self.item2Button, action)
		self.isOverItem3Buy = is_over(self.item3Button, action)
		self.isOverItem4Buy = is_over(self.item4Button, action)
		self.isOverItem1OC = is_over(self.item1OC, action)
		self.isOverItem2OC = is_over(self.item2OC, action)
		self.isOverItem3OC = is_over(self.item3OC, action)
		self.isOverItem4OC = is_over(self.item4OC, action)
		self.isOverUpgrade = is_over(self.upgradeButton, action)
		
		hoverButtonText(self, action)
	end
end



