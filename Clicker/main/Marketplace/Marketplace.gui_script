

function init(self)
	msg.post(".","acquire_input_focus")
	
 	self.item1Price = gui.get_node("item1Price")
 	self.item1Pie = gui.get_node("item1Pie")
 	self.item1Count = gui.get_node("item1Amount")

 	self.item2Price = gui.get_node("item2Price")
 	self.item2Pie = gui.get_node("item2Pie")
 	self.item2Count = gui.get_node("item2Amount")

 	self.item3Price = gui.get_node("item3Price")
 	self.item3Pie = gui.get_node("item3Pie")
 	self.item3Count = gui.get_node("item3Amount")

 	self.item4Price = gui.get_node("item4Price")
 	self.item4Pie = gui.get_node("item4Pie")
 	self.item4Count = gui.get_node("item4Amount")
end

function short_number(number)
	local shorted_number
	if number < 10^6  then
		shorted_number = number
	elseif number < 10^9 then
		number = number / 10^6
		shorted_number = string.format("%3.3f", number) .. " million"
	elseif number < 10^12 then
		number = number / 10^9
		shorted_number = string.format("%3.3f", number) .. " billion"
	end
	return shorted_number
end

function on_message(self, message_id, message, sender)
	--update amount and price
	if message_id == hash("Updateitem1") then
		gui.set_text(self.item1Count, message.count)
		gui.set_text(self.item1Price, message.price)
	end	
	if message_id == hash("Updateitem2") then
		gui.set_text(self.item2Count, message.count)
		gui.set_text(self.item2Price, message.price)
	end
	if message_id == hash("Updateitem3") then
		gui.set_text(self.item3Count, message.count)
		gui.set_text(self.item3Price, message.price)
	end
	if message_id == hash("Updateitem4") then
		
		gui.set_text(self.item4Count, message.count)
		gui.set_text(self.item4Price, message.price)
	end

	--update Availability
	if message_id == hash("UpdateAvailability") then

		if message.item1 >= 1 then
			gui.set_color(self.item1Price, vmath.vector4(0,0.9,0,1))--green
			gui.set_fill_angle(self.item1Pie, 0)
		else
			gui.set_color(self.item1Price, vmath.vector4(0.9,0,0,1))--red
			gui.set_fill_angle(self.item1Pie, 360 - message.item1 * 360)
		end
		if message.item2 >= 1 then
			gui.set_color(self.item2Price, vmath.vector4(0,0.9,0,1))--green
			gui.set_fill_angle(self.item2Pie, 0)
		else
			gui.set_color(self.item2Price, vmath.vector4(0.9,0,0,1))--red
			gui.set_fill_angle(self.item2Pie, 360 - message.item2 * 360)
		end
		if message.item3 >= 1 then
			gui.set_color(self.item3Price, vmath.vector4(0,0.9,0,1))--green
			gui.set_fill_angle(self.item3Pie, 0)
		else
			gui.set_color(self.item3Price, vmath.vector4(0.9,0,0,1))--red
			gui.set_fill_angle(self.item3Pie, 360 - message.item3 * 360)
		end
		if message.item4 >= 1 then
			gui.set_color(self.item4Price, vmath.vector4(0,0.9,0,1))--green
			gui.set_fill_angle(self.item4Pie, 0)
		else
			gui.set_color(self.item4Price, vmath.vector4(0.9,0,0,1))--red
			gui.set_fill_angle(self.item4Pie, 360 - message.item4 * 360)
		end
	end

end

function on_input(self, action_id, action)
	if action_id == hash("LEFT_CLICK") and action.released then
		local item1Button = gui.get_node("item1Button")
		local item2Button = gui.get_node("item2Button")
		local item3Button = gui.get_node("item3Button")
		local item4Button = gui.get_node("item4Button")
		
		local upgradeButton = gui.get_node("upgradeButton")

		--item1 button
		if gui.pick_node(item1Button, action.x, action.y) then
			msg.post("/Main#main", "addItem1")
		end

		--item2 button
		if gui.pick_node(item2Button, action.x, action.y) then
			msg.post("/Main#main", "addItem2")
		end

		--item3 button
		if gui.pick_node(item3Button, action.x, action.y) then
			msg.post("/Main#main", "addItem3")
		end

		--item4 button
		if gui.pick_node(item4Button, action.x, action.y) then
			msg.post("/Main#main", "addItem4")	
		end
			
		if gui.pick_node(upgradeButton, action.x, action.y) then
			msg.post("/UI#ClickButton", "upgradeClickSprite")
		end
	end	
end

