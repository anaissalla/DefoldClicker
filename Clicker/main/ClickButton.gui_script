go.property("upgradeScaler", 15)

function init(self)

	msg.post(".", "acquire_input_focus")


	self.PCSprite = gui.get_node("PC")


	self.upgradeButton = gui.get_node("UpgradePC")

	self.level = 0
	self.coinsPerClick = 1


end

local function resetPCSize(self, handle, time_elapsed)
	--local PCSprite = gui.get_node("PC")
	gui.set_size(self.PCSprite, vmath.vector3(200, 200, 0))
end

local function UpgradeCoinsPerClick( )
	return self.coinsPerClick * self.upgradeScaler
end

function on_message(self, message_id, message, sender)
	if message_id == hash("UpdatePC") then
		if message.level == 0 then
			gui.play_flipbook(PCSprite, "Computer")
		elseif message.level == 1 then
			gui.play_flipbook(PCSprite, "logo")
		elseif message.level == 2 then

		elseif message.level == 3 then

		elseif message.level == 4 then

		else

		end

	end
end

function on_input(self, action_id, action)
	if action_id == hash("LEFT_CLICK")  then
		--local PCSprite = gui.get_node("PC")
		if action.pressed then
			if gui.pick_node(self.PCSprite, action.x, action.y) then

				msg.post("/Main#main", "addCoin", {coins = 1})

				
				if self.level == 0 then
					gui.play_flipbook(self.PCSprite, hash("PC"))
					self.level = 1
				else
					self.level = 0
					gui.play_flipbook(self.PCSprite, hash("Computer"))
				end

				
				
				--visual feeedback
				gui.set_size(self.PCSprite, vmath.vector3(200,200,0))

				gui.animate(self.PCSprite, "size", vmath.vector3(190, 190, 0), gui.EASING_OUTELASTIC, 1)

				--gui.set_size(self.PCSprite, vmath.vector3(180, 180, 0))
				--timer.delay(0.1, false, resetPCSize)
			end
		end
		if action.released then
			if gui.pick_node(self.upgradeButton, action.x, action.y) then
				--add level
				self.level = self.level + 1

				--upgrade the  coins recived in one coinsPerClick
				self.coinsPerClick = UpgradeCoinsPerClick()

				--subtract price to Main coin count
				
				--Update price on button

				--Update Sprite PC
				msg.post(".", "UpdatePC", {level = self.level})

				--Update main
				msg.post("/Main#main", "PCUpgraded", {level = self.level, currentCoinsPerClick = self.coinsPerClick})
			end
		end
	end	
end

