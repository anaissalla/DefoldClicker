
local function SetGPU(self, coords, tipo )		
	self.slotsType[coords.y][coords.x] = tipo
	
	if tipo == 0 then
		gui.play_flipbook(self.slotReference[coords.y][coords.x], "fan_empty")
	elseif tipo == 1 then 
		if coords.x == 4 then
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "green_fan_front_animation")
		else
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "green_fan_back_animation")
		end
	elseif tipo == 2 then
		print("tipo2")
		if coords.x == 4 then
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "purple_fan_front_animation")
		else
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "purple_fan_back_animation")
		end
	elseif tipo == 3 then
		if coords.x == 4 then
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "red_fan_front_animation")
		else
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "red_fan_back_animation")
		end
	elseif tipo == 4 then
		if coords.x == 4 then
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "blue_fan_front_animation")
		else
			gui.play_flipbook(self.slotReference[coords.y][coords.x], "blue_fan_back_animation")
		end
	else
		print("ERROR!: Wrong GPU type")
	end
	if coords.x == 4 and coords.y == 7 then

		--call new rack
		timer.delay(0.2, false, new_rack)
	end
end

local function RemoveAllGPU(self)
	for y=1,7 do
		for x=1,4 do
			self.slotsType[y][x] = 0
			gui.play_flipbook(self.slotReference[y][x], "fan_empty")
		end
	end
end
local function GetReferences( self )
	local references = {}
	for i=1,7 do
		references[i] = {}
		for j=1,4 do
			references[i][j] = gui.get_node("Slot" .. i .. j)
		end
	end

	return references
end

function new_rack(self, handle, time_elapsed)
	--enable mock rack img on tip
	gui.set_enabled(self.mock, true)
	gui.set_scale(self.mock, vmath.vector3(1))
	gui.move_above(self.mock, self.rack)
	
		
	--move rack out
	gui.set_position(self.rack, vmath.vector3(-600, 910 , 0))

	--reset rack
	RemoveAllGPU(self)

	--send mock to the back
	gui.move_below(self.mock, self.rack)

	--animate mock rack out
	gui.animate(self.mock, "scale", vmath.vector3(0.8, 0.8, 1),gui.EASING_INOUTSINE , 1 )

	--animate rack in
	gui.animate(self.rack, "position", self.rackPos, gui.EASING_OUTBACK, 1, 0.4, animation_finished)


end

local function animation_finished( self, node )
	--enable market 
	msg.post("/UI#Marketplace", "SetEnablePurchase", {enable = true})

	--Disable mock
	gui.set_enabled(self.mock, false)
end

function init(self)

	--Ajust render order
	gui.set_render_order(0)

	--declare a matrix to define slot types
	self.slotsType = {
		{0,0,0,0},
		{0,0,0,0},
		{0,0,0,0},
		{0,0,0,0},
		{0,0,0,0},
		{0,0,0,0},
		{0,0,0,0}
	}
	--declare a matrix to store the references to all nodes
	self.slotReference = GetReferences(self)

	--store references to rack and mock
	self.rack = gui.get_node("Rack")
	self.mock = gui.get_node("Mock")

	--Disable mock
	gui.set_enabled(self.mock, false)

	--store rack and mock pos
	self.rackPos = gui.get_position(self.rack)
	self.mockPos = gui.get_position(self.mock)

 	--initalize rack
	RemoveAllGPU(self)

end

local function GetFirsFreeSlot(self)
	for i=1,7 do
		for j=1,4 do
			if self.slotsType[i][j] == 0 then
				return {x = j, y = i, slot = "SLOT_FOUND"}
			end
		end
	end
	return {slot = "NO_SLOT"}
end

function on_message(self, message_id, message, sender)

	if message_id == hash("AddGPU") then 
		local position = GetFirsFreeSlot(self)
		if position.slot == "NO_SLOT" then
			print("ALERT!: No solts abilable")
		elseif position.slot == "SLOT_FOUND" then
			SetGPU(self, position, message.tipo)
		else
			print("ERROR!: Malfunction ocurred on finding slot")
		end
	end	
end

function on_input(self, action_id, action)

end
