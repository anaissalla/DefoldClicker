go.property("bitcoinCount", 0)
go.property("laptopCount", 0)
go.property("laptopProduction", 1)
go.property("PCCount", 0)
go.property("PCProduction", 15)
go.property("serverCount", 0)
go.property("serverProduction", 200)
go.property("quantumCount", 0)
go.property("quantumProduction", 5000)

go.property("laptopInitialCost", 10)
go.property("PCInitialCost", 1000)
go.property("serverInitialCost", 1000000)
go.property("quantumInitialCost", 100000000)

go.property("costScaler", 0.08)


function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	self.timer = 0

	self.laptopCurrentCost = self.laptopInitialCost
	self.PCCurrentCost = self.PCInitialCost
	self.serverCurrentCost = self.serverInitialCost
	self.quantumCurrentCost = self.quantumInitialCost

	msg.post("/UI#Marketplace", "UpdateLaptop", {count = self.laptopCount, price = self.laptopCurrentCost})
	msg.post("/UI#Marketplace", "UpdatePC", {count = self.PCCount, price = self.PCCurrentCost})
	msg.post("/UI#Marketplace", "UpdateServer", {count = self.serverCount, price = self.serverCurrentCost})
	msg.post("/UI#Marketplace", "UpdateQuantum", {count = self.quantumCount, price = self.quantumCurrentCost})

	
end

function update(self, dt)	
	self.timer = self.timer + dt



	--fixedUpdate --update a cada segon
	if self.timer > 1 then
		self.timer = self.timer - 1
		
		local currentProduction = self.laptopCount * self.laptopProduction + self.PCCount * self.PCProduction + self.serverCount * self.serverProduction + self.quantumCount * self.quantumProduction
		msg.post(".", "addCoin", {coins = currentProduction})



		msg.post("/UI#Info", "UpdateBitcoinCount", {coins = self.bitcoinCount})
		msg.post("/UI#Info", "UpdateBitcoinSpeed", {coins = currentProduction})
	end

end

function new_price(self, old_price)
	local increment = old_price * self.costScaler
	local increment_floored = math.floor(increment)
	if increment_floored + 0.5 > increment then
		increment = increment_floored + 1
	else
		increment = increment_floored
	end
	local new_price = old_price + increment
	return new_price

end

function on_message(self, message_id, message, sender)
	if message_id == hash("addCoin") then
		self.bitcoinCount = self.bitcoinCount + message.coins
	end

	if message_id == hash("addLaptop") then
		self.laptopCount = self.laptopCount + 1
		msg.post("/UI#Marketplace", "UpdateLaptop", {count = self.laptopCount, price = self.laptopCurrentCost})
	end 	
	if message_id == hash("addPC") then 
		self.PCCount = self.PCCount + 1
		msg.post("/UI#Marketplace", "UpdatePC", {count = self.PCCount, price = self.PCCurrentCost})
	end
	if message_id == hash("addServer") then
		self.serverCount = self.serverCount + 1
		msg.post("/UI#Marketplace", "UpdateServer", {count = self.serverCount, price = self.serverCurrentCost})
	end	
	if message_id == hash("addQuantum") then
		self.quantumCount = self.quantumCount + 1
		msg.post("/UI#Marketplace", "UpdateQuantum", {count = self.quantumCount, price = self.quantumCurrentCost})
	end
end


function on_input(self, action_id, action)
	if action_id == hash("LEFT_CLICK") and action.pressed then
		print("Touch!")
		
	end

	if action_id  == hash("ESCAPE") and action.released then
		msg.post("UI", "enable")
	
	end
end

