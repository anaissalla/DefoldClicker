go.property("bitcoinCount", 0)
go.property("laptopCount", 0)
go.property("PCCount", 0)
go.property("serverCount", 0)
go.property("quantumCount", 0)


function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })


	self.timer = 0
	--self.laptopCount = 0
	--self.PCCount = 0
	--self.serverCount = 0
	--self.quantumCount
	--msg.post("UI", "disable")
end

function update(self, dt)	--update a cada segon
	self.timer = self.timer + dt
	if self.timer > 1 then
		self.timer = self.timer - 1
		
		

		
	end

end

function on_message(self, message_id, message, sender)
	if message_id == hash("addCoin") then
		self.bitcoinCount = self.bitcoinCount + message.coinCount
	end

	if message_id == hash("addLaptop") then
		self.laptopCount = self.laptopCount + 1
		msg.post("/Marketplace#Marketplace", "UpdateLaptopCount", {laptopCount = self.laptopCount})
	end 	
	if message_id == hash("addPC") then 
		self.PCCount = self.PCCount + 1
		msg.post("/Marketplace#Marketplace", "UpdatePCCount", {PCCount = self.PCCount})
	end
	if message_id == hash("addServer") then
		self.serverCount = self.serverCount + 1
		msg.post("/Marketplace#Marketplace", "UpdateServerCount", {serverCount = self.serverCount})
	end	
	if message_id == hash("addQuantum") then
		self.quantumCount = self.quantumCount + 1
		msg.post("/Marketplace#Marketplace", "UpdateQuantumCount", {quantumCount = self.quantumCount})
	end
end


function on_input(self, action_id, action)
	if action_id == hash("LEFT_CLICK") and action.pressed then
		print("Touch!")
		
	end

	if action_id  == hash("ESCAPE") and action.released then
		msg.post("UI", "enable")
	
	end
end

