bitcoinCount = 0
go.property("item1Count", 0)
go.property("item1Production", 1)
go.property("item2Count", 0)
go.property("item2Production", 15)
go.property("item3Count", 0)
go.property("item3Production", 200)
go.property("item4Count", 0)
go.property("item4Production", 5000)

go.property("item1InitialCost", 10)
go.property("item2InitialCost", 1000)
go.property("item3InitialCost", 1000000)
go.property("item4InitialCost", 100000000)

go.property("costScaler", 0.18)

go.property("clickUpgradeInitialCost", 1000)
go.property("clickUpgradeCostScaler", 15)

go.property("item1InitialOCCost", 20)
go.property("item2InitialOCCost", 30)
go.property("item3InitialOCCost", 40)
go.property("item4InitialOCCost", 50)

go.property("OCScaler", 3)


function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })



	
	self.currentProduction = 0
	self.item1CurrentCost = self.item1InitialCost
	self.item2CurrentCost = self.item2InitialCost
	self.item3CurrentCost = self.item3InitialCost
	self.item4CurrentCost = self.item4InitialCost
	self.clickUpgradeCurrentCost = self.clickUpgradeInitialCost

	

	self.item1CurrentOCCost = self.item1InitialOCCost
	self.item2CurrentOCCost = self.item2InitialOCCost
	self.item3CurrentOCCost = self.item3InitialOCCost
	self.item4CurrentOCCost = self.item4InitialOCCost

	self.PClevel = 0

--SetUp Marketplace
	msg.post("/UI#Marketplace", "Updateitem1", {count = self.item1Count, price = self.item1CurrentCost})
	msg.post("/UI#Marketplace", "Updateitem2", {count = self.item2Count, price = self.item2CurrentCost})
	msg.post("/UI#Marketplace", "Updateitem3", {count = self.item3Count, price = self.item3CurrentCost})
	msg.post("/UI#Marketplace", "Updateitem4", {count = self.item4Count, price = self.item4CurrentCost})
	msg.post("/UI#Marketplace",  "UpdateUpgrade", {item1 = self.item1CurrentOCCost, item2 = self.item2CurrentOCCost, item3 = self.item3CurrentOCCost, item4 = self.item4CurrentOCCost })

--SetUp Info
	msg.post(".", "UpdateBitcoinSpeed")
	msg.post(".", "addCoin", {coins = 0})

	
end

function update(self, dt)	

	--Update coins
	bitcoinCount = bitcoinCount + self.currentProduction * dt
	msg.post("/UI#Info", "UpdateBitcoinCount", {coins = bitcoinCount})

	--Update Marketplace 
	local item1Available = bitcoinCount / self.item1CurrentCost
	
	local item2Available = bitcoinCount / self.item2CurrentCost
	local item3Available = bitcoinCount / self.item3CurrentCost
	local item4Available = bitcoinCount / self.item4CurrentCost

	if self.PClevel < 4 then
		local upgradeProgress = 1 / (self.clickUpgradeCurrentCost / bitcoinCount)
		msg.post("/UI#Marketplace","UpdatePCUpgrade", {progress = upgradeProgress})
	end
	
	msg.post("/UI#Marketplace", "UpdateAvailability", {item1 = item1Available, item2 = item2Available, item3 = item3Available, item4 = item4Available})

	msg.post("/UI#Marketplace", "UpdateInfo", {item1Production = self.item1Production, item2Production = self.item2Production, item3Production = self.item3Production, item4Production = self.item4Production})
end

local function new_price(current_price, scaler)
	local price_increment = string.format("%.0f", current_price * scaler)
	return current_price + price_increment

end

function on_message(self, message_id, message, sender)
	--add coins
	if message_id == hash("addCoin") then
		bitcoinCount = bitcoinCount + message.coins
		msg.post("/UI#Info", "UpdateBitcoinCount", {coins = math.floor(bitcoinCount)})
	end

	if message_id == hash("UpdateBitcoinSpeed") then
		self.currentProduction = self.item1Count * self.item1Production + self.item2Count * self.item2Production + self.item3Count * self.item3Production + self.item4Count * self.item4Production
		msg.post("/UI#Info", "UpdateBitcoinSpeed", {coins = self.currentProduction})
	end

	

	if message_id == hash("addItem1") then

		if(bitcoinCount >= self.item1CurrentCost) then
			--add item1
			self.item1Count = self.item1Count + 1

			--remove coins
			msg.post(".", "addCoin", {coins = -self.item1CurrentCost})

			--Solve new price
			self.item1CurrentCost = new_price(self.item1CurrentCost, self.costScaler)

			--Update Marketplace info
			msg.post("/UI#Marketplace", "Updateitem1", {count = self.item1Count, price = self.item1CurrentCost})

			--Update Game Info
			msg.post(".", "UpdateBitcoinSpeed")

			--Update Rack
			msg.post("/UI#Racks", "AddGPU", {tipo = 1})
			
		end
	end 	


	if message_id == hash("addItem2") then 
		if bitcoinCount >= self.item2CurrentCost then
			self.item2Count = self.item2Count + 1
			msg.post(".", "addCoin", {coins = -self.item2CurrentCost})
			self.item2CurrentCost = new_price(self.item2CurrentCost, self.costScaler)
			msg.post("/UI#Marketplace", "Updateitem2", {count = self.item2Count, price = self.item2CurrentCost})
			msg.post(".", "UpdateBitcoinSpeed")
			msg.post("/UI#Racks", "AddGPU", {tipo = 2})
		end
	end

	if message_id == hash("addItem3") then
		if bitcoinCount >= self.item3CurrentCost then
			self.item3Count = self.item3Count + 1
			msg.post(".", "addCoin", {coins = -self.item3CurrentCost})
			self.item3CurrentCost = new_price(self.item3CurrentCost, self.costScaler)
			msg.post("/UI#Marketplace", "Updateitem3", {count = self.item3Count, price = self.item3CurrentCost})
			msg.post(".", "UpdateBitcoinSpeed")
			msg.post("/UI#Racks", "AddGPU", {tipo = 3})
		end

	end	

	if message_id == hash("addItem4") then
		if bitcoinCount >= self.item4CurrentCost then
			self.item4Count = self.item4Count + 1
			msg.post(".", "addCoin", {coins = -self.item4CurrentCost})
			self.item4CurrentCost = new_price(self.item4CurrentCost, self.costScaler)
			msg.post("/UI#Marketplace", "Updateitem4", {count = self.item4Count, price = self.item4CurrentCost})
			msg.post(".", "UpdateBitcoinSpeed")
			msg.post("/UI#Racks", "AddGPU", {tipo = 4})
		end
	end

	if message_id == hash("upgradeClick") then
		if (self.PClevel < 4) and (bitcoinCount >= self.clickUpgradeCurrentCost) then
				self.PClevel = self.PClevel + 1
				msg.post(".", "addCoins", {coins = -self.clickUpgradeCurrentCost})
				
				self.clickUpgradeCurrentCost = new_price(self.clickUpgradeCurrentCost, self.clickUpgradeCostScaler)
				msg.post("/UI#ClickButton", "upgradeClickSprite")
				
				if self.PClevel == 4 then
					--Change button name to max lvl
					msg.post("/UI#Marketplace", "MaxLevelReached")
				end
		end
	end

	if message_id == hash("OCitem1") then
		if bitcoinCount >= self.item1CurrentOCCost then
			--remove coins
			msg.post(".", "addCoin", {coins = -self.item1CurrentCost})

			--Upgrade production
			self.item1Production = new_price(self.item1Production , self.OCScaler)

			--Update production speed
			msg.post(".", "UpdateBitcoinSpeed")

			--Update Upgrade costScaler
			self.item1CurrentOCCost = new_price(self.item1CurrentOCCost, self.clickUpgradeCostScaler)

			--Update marketplace info
			msg.post("/UI#Marketplace",  "UpdateUpgrade", {item1 = self.item1CurrentOCCost, item2 = self.item2CurrentOCCost, item3 = self.item3CurrentOCCost, item4 = self.item4CurrentOCCost })

			--Update Hover info
			
		end
	end
	if message_id == hash("OCitem2") then
		msg.post(".", "addCoin", {coins = -self.item2CurrentCost})
		self.item2Production = new_price(self.item2Production , self.OCScaler)
		msg.post(".", "UpdateBitcoinSpeed")
		self.item2CurrentOCCost = new_price(self.item2CurrentOCCost, self.clickUpgradeCostScaler)
		msg.post("/UI#Marketplace",  "UpdateUpgrade", {item1 = self.item1CurrentOCCost, item2 = self.item2CurrentOCCost, item3 = self.item3CurrentOCCost, item4 = self.item4CurrentOCCost })
	end
	if message_id == hash("OCitem3") then
		msg.post(".", "addCoin", {coins = -self.item3CurrentCost})
		self.item3Production = new_price(self.item3Production , self.OCScaler)
		msg.post(".", "UpdateBitcoinSpeed")
		self.item3CurrentOCCost = new_price(self.item3CurrentOCCost, self.clickUpgradeCostScaler)
		msg.post("/UI#Marketplace",  "UpdateUpgrade", {item1 = self.item1CurrentOCCost, item2 = self.item2CurrentOCCost, item3 = self.item3CurrentOCCost, item4 = self.item4CurrentOCCost })
		
	end
	if message_id == hash("OCitem4") then
		msg.post(".", "addCoin", {coins = -self.item4CurrentCost})
		self.item4Production = new_price(self.item4Production , self.OCScaler)
		msg.post(".", "UpdateBitcoinSpeed")
		self.item4CurrentOCCost = new_price(self.item4CurrentOCCost, self.clickUpgradeCostScaler)
		msg.post("/UI#Marketplace",  "UpdateUpgrade", {item1 = self.item1CurrentOCCost, item2 = self.item2CurrentOCCost, item3 = self.item3CurrentOCCost, item4 = self.item4CurrentOCCost })
		
	end
end


function on_input(self, action_id, action)
	if action_id == hash("LEFT_CLICK") and action.pressed then
		
		
	end

	if action_id  == hash("ESCAPE") and action.released then
		msg.post("UI", "enable")
	
	end
end

